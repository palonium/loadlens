// src/components/ScenarioRunner.jsx
import { useEffect, useRef, useState } from "react";

export default function ScenarioRunner() {
  const scenario = {
    id: 1,
    task_text: "–ù–∞–π–¥–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'.",
    environment_url: "/test-env.html" // –ª–æ–∫–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞
  };

  const iframeRef = useRef(null);
  const [clicks, setClicks] = useState([]);
  const [clickCount, setClickCount] = useState(0);
  const [startTime, setStartTime] = useState(null);

  useEffect(() => {
    const iframe = iframeRef.current;

    const handleIframeLoad = () => {
      const doc = iframe?.contentDocument || iframe?.contentWindow?.document;
      if (!doc) return;

      setStartTime(Date.now());

      const handleClick = (e) => {
        const path = e.composedPath().map((el) =>
          el.tagName ? el.tagName : el.nodeName
        );

        const clickData = {
          tag: e.target.tagName,
          text: e.target.innerText,
          x: e.clientX,
          y: e.clientY,
          path,
          timestamp: Date.now()
        };

        setClicks((prev) => [...prev, clickData]);
        setClickCount((prev) => prev + 1);
      };

      doc.addEventListener("click", handleClick);

      // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      return () => doc.removeEventListener("click", handleClick);
    };

    iframe?.addEventListener("load", handleIframeLoad);

    return () => iframe?.removeEventListener("load", handleIframeLoad);
  }, []);

  const handleFinish = () => {
    const duration = Math.floor((Date.now() - startTime) / 1000);
    console.log("üß† –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω:");
    console.log("‚è±Ô∏è –í—Ä–µ–º—è:", duration, "—Å–µ–∫");
    console.log("üñ±Ô∏è –ö–ª–∏–∫–∏:", clickCount);
    console.log("üìç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:", clicks);
  };

  return (
    <div className="scenario">
      <h2 className="scenario__title">{scenario.task_text}</h2>

      <iframe
        ref={iframeRef}
        src={scenario.environment_url}
        className="scenario__frame"
        title="–°—Ä–µ–¥–∞"
        style={{
          width: "100%",
          height: "500px",
          border: "1px solid #ccc",
          marginBottom: "1rem"
        }}
      />

      <button onClick={handleFinish} className="scenario__finish">
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
      </button>
    </div>
  );
}
